package Q04_Plus_LargeNumAndSmallNum;

import java.util.*;

public class Main {

	public static final Scanner scanner = new Scanner(System.in);
	
	public static void main(String[] args) {
		// 사용할 숫자의 갯수를 입력받는다.
		int n = scanner.nextInt();
		
		// 실제로는 숫자지만 문자열로서 다루면 훨씬 코드가 간결해지므로 이렇게 입력받는다.
		String[] numbers = new String[n];
		for(int i=0; i<n; i++) {
			numbers[i] = scanner.next();
		}
		
		// 숫자들을 정렬한다.
		// 정렬하는 기준은 단순 사전순이 아니라 따로 정의한다.
		Arrays.sort(numbers, new Comparator<String>() {

			@Override
			public int compare(String o1, String o2) {
				// 일반적으로 작은 숫자가 앞으로 오도록 정렬하면 차례로 이어붙이면 가장 작은 숫자를 만들 수 있을 것 같다.
				// 하지만
				// 하나는 두 글자이고 하나는 한 글자일 때 앞 자리가 같은 경우가 정렬의 예외 케이스가 된다.
				// 예를 들어서 큰 숫자를 만들 때 사용할 수 있는 숫자가 65, 6 ,67 이 있다면
				// 67 < 6 < 65 순으로 사용하는게 가장 유리하다.
				// 이 경우를 예외처리 해주기 위하여 한 글자의 숫자를 두 숫자가 이어붙인 것 처럼 생각해서 정렬한다.
				
				// 각 숫자가 한 글자라면 복사해서 두 글자 처럼 취급해서 정렬한다.
				// 예: 5 -> 55
				if ( o1.length() == 1) {
					o1 = o1 + o1;
				}
				if (o2.length() == 1) {
					o2 = o2 + o2;
				}
				// 그 후 일반적인 문자열의 사전순 정렬을 따른다.
				// (자릿수가 같으므로 일반적인 숫자의 대소비교와 같다.
				return o1.compareTo(o2); 
			}
		});
		
		String max = ""; // 정렬된 숫자들을 뒤에서부터 이어붙인다.
		String min = ""; // 정렬된 숫자들을 앞에서부터 이어붙인다.
		for (int i=0; i<n; i++) {
			max += numbers[n-i-1];
			min += numbers[i];
		}
		
		// 만들어진 정답 문자열들을 숫자로 변환하고
		long max_value = Long.parseLong(max);
		long min_value = Long.parseLong(min);
		
		// 두 값을 더하여 정답을 만들고 출력한다.
		long answer = max_value + min_value;
		System.out.println(answer);
	}
}
