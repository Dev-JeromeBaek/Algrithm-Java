package Q01_near_Two_Point;

import java.util.*;
import java.io.*;

public class Main {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		// 좌표의 수 n을 입력받는다
		int n= scanner.nextInt();
		
		// n개의 좌표를 입력받는다.
		// 10자리 숫자가 들어오면 int형을 벗어나므로 long 타입으로 받는다.
		long[] v = new long[n];
		for (int i=0; i<n; i++) {
			v[i] = scanner.nextLong();
		}
		
		// 각 좌표를 오름차순으로 정렬한다.
		Arrays.sort(v);
		
		// 일단 가장 처음 두 점이 가장 가깝다고 가정
		long min_dist = v[1] - v[0];
		int min_left = 0;
		
		// 정렬한 후에는 각 좌표는 바로 오른쪽 좌표와만 비교를 한다 (최소 거리를 찾는게 목적이므로)
		for (int i=1; i+1<n; i++) {
			// i와 그 오른쪽 번째 좌표와의 거리를 계산해본다.
			int left = i;
			int right = i+1;
			long dist = v[right] - v[left];
			
			// 여태까지 계산한 거리 둘 중에 가장 짧다면 그 거리로 갱신한다.
			// 등호가 없으므로 먼저 발견한(좌표가 작은) 값이 우선된다.
			if(dist < min_dist) {
				min_dist = dist;
				min_left = left;
			}
		}
		
		// 정답을 출력한다.
		System.out.printf("%d %d\n", v[min_left], v[min_left+1]);
	}
}
